import 'package:flutter/foundation.dart';
import 'package:hydracat/features/onboarding/models/treatment_data.dart';

/// Data Transfer Object for creating treatment schedules
///
/// This class provides a type-safe structure for schedule data being
/// sent to Firestore. It ensures consistency between medication and
/// fluid therapy schedules.
///
/// Use factory constructors [ScheduleDto.medication] or [ScheduleDto.fluid]
/// to create schedules for specific treatment types.
@immutable
class ScheduleDto {
  /// Creates a [ScheduleDto] instance
  const ScheduleDto({
    required this.treatmentType,
    required this.frequency,
    required this.reminderTimes,
    required this.isActive,
    this.id,
    this.medicationName,
    this.targetDosage,
    this.medicationUnit,
    this.targetVolume,
    this.preferredLocation,
    this.needleGauge,
  });

  /// Factory constructor for medication schedules
  ///
  /// Creates a schedule DTO specifically for medication treatments with
  /// all required medication-specific fields.
  factory ScheduleDto.medication({
    required String medicationName,
    required String targetDosage,
    required String medicationUnit,
    required TreatmentFrequency frequency,
    required List<DateTime> reminderTimes,
    String? id,
    bool isActive = true,
  }) {
    return ScheduleDto(
      id: id,
      treatmentType: 'medication',
      medicationName: medicationName,
      targetDosage: targetDosage,
      medicationUnit: medicationUnit,
      frequency: frequency,
      reminderTimes: reminderTimes,
      isActive: isActive,
    );
  }

  /// Factory constructor for fluid therapy schedules
  ///
  /// Creates a schedule DTO specifically for fluid therapy treatments with
  /// all required fluid-specific fields.
  factory ScheduleDto.fluid({
    required double targetVolume,
    required TreatmentFrequency frequency,
    required FluidLocation preferredLocation,
    required String needleGauge,
    required List<DateTime> reminderTimes,
    String? id,
    bool isActive = true,
  }) {
    return ScheduleDto(
      id: id,
      treatmentType: 'fluid',
      targetVolume: targetVolume,
      frequency: frequency,
      preferredLocation: preferredLocation,
      needleGauge: needleGauge,
      reminderTimes: reminderTimes,
      isActive: isActive,
    );
  }

  /// Optional schedule ID (will be generated by ScheduleService if null)
  final String? id;

  /// Type of treatment: 'medication' or 'fluid'
  final String treatmentType;

  /// Treatment frequency
  final TreatmentFrequency frequency;

  /// List of reminder times for the treatment
  final List<DateTime> reminderTimes;

  /// Whether this schedule is currently active
  final bool isActive;

  // Medication-specific fields (null for fluid therapy)

  /// Medication name (medication schedules only)
  final String? medicationName;

  /// Target dosage as string (e.g., "1", "1/2", "2.5")
  final String? targetDosage;

  /// Medication unit as string (e.g., "pills", "ml", "mg")
  final String? medicationUnit;

  // Fluid therapy-specific fields (null for medication)

  /// Target volume in milliliters (fluid therapy only)
  final double? targetVolume;

  /// Preferred administration location (fluid therapy only)
  final FluidLocation? preferredLocation;

  /// Needle gauge preference (fluid therapy only)
  final String? needleGauge;

  /// Converts the DTO to a JSON-compatible map for Firestore
  ///
  /// Note: This does NOT include createdAt/updatedAt timestamps.
  /// Those are added by ScheduleService with server timestamps.
  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{
      if (id != null) 'id': id,
      'treatmentType': treatmentType,
      'frequency': frequency.name,
      'reminderTimes': reminderTimes
          .map((dateTime) => dateTime.toIso8601String())
          .toList(),
      'isActive': isActive,
    };

    // Add medication-specific fields
    if (treatmentType == 'medication') {
      json['medicationName'] = medicationName;
      json['targetDosage'] = targetDosage;
      json['medicationUnit'] = medicationUnit;
    }

    // Add fluid-specific fields
    if (treatmentType == 'fluid') {
      json['targetVolume'] = targetVolume;
      json['preferredLocation'] = preferredLocation?.name;
      json['needleGauge'] = needleGauge;
    }

    return json;
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is ScheduleDto &&
        other.id == id &&
        other.treatmentType == treatmentType &&
        other.frequency == frequency &&
        listEquals(other.reminderTimes, reminderTimes) &&
        other.isActive == isActive &&
        other.medicationName == medicationName &&
        other.targetDosage == targetDosage &&
        other.medicationUnit == medicationUnit &&
        other.targetVolume == targetVolume &&
        other.preferredLocation == preferredLocation &&
        other.needleGauge == needleGauge;
  }

  @override
  int get hashCode {
    return Object.hash(
      id,
      treatmentType,
      frequency,
      Object.hashAll(reminderTimes),
      isActive,
      medicationName,
      targetDosage,
      medicationUnit,
      targetVolume,
      preferredLocation,
      needleGauge,
    );
  }

  @override
  String toString() {
    return 'ScheduleDto('
        'id: $id, '
        'treatmentType: $treatmentType, '
        'frequency: $frequency, '
        'reminderTimes: $reminderTimes, '
        'isActive: $isActive, '
        'medicationName: $medicationName, '
        'targetDosage: $targetDosage, '
        'medicationUnit: $medicationUnit, '
        'targetVolume: $targetVolume, '
        'preferredLocation: $preferredLocation, '
        'needleGauge: $needleGauge'
        ')';
  }
}
